// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	user "cypt/internal/user/usecase"

	mock "github.com/stretchr/testify/mock"
)

// UserController is an autogenerated mock type for the UserController type
type UserController struct {
	mock.Mock
}

// RegisterUser provides a mock function with given fields: username, password
func (_m *UserController) RegisterUser(username string, password string) (user.RegisterUserUseCaseOutput, error) {
	ret := _m.Called(username, password)

	var r0 user.RegisterUserUseCaseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (user.RegisterUserUseCaseOutput, error)); ok {
		return rf(username, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) user.RegisterUserUseCaseOutput); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Get(0).(user.RegisterUserUseCaseOutput)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Rename provides a mock function with given fields: id, username
func (_m *UserController) Rename(id string, username string) (user.RenameUseCaseOutput, error) {
	ret := _m.Called(id, username)

	var r0 user.RenameUseCaseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (user.RenameUseCaseOutput, error)); ok {
		return rf(id, username)
	}
	if rf, ok := ret.Get(0).(func(string, string) user.RenameUseCaseOutput); ok {
		r0 = rf(id, username)
	} else {
		r0 = ret.Get(0).(user.RenameUseCaseOutput)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserController interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserController creates a new instance of UserController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserController(t mockConstructorTestingTNewUserController) *UserController {
	mock := &UserController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
