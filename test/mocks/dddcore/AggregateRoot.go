// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	dddcore "cypt/internal/dddcore"

	mock "github.com/stretchr/testify/mock"
)

// AggregateRoot is an autogenerated mock type for the AggregateRoot type
type AggregateRoot struct {
	mock.Mock
}

// AddDomainEvent provides a mock function with given fields: _a0
func (_m *AggregateRoot) AddDomainEvent(_a0 dddcore.Event) {
	_m.Called(_a0)
}

// GetDomainEvents provides a mock function with given fields:
func (_m *AggregateRoot) GetDomainEvents() []dddcore.Event {
	ret := _m.Called()

	var r0 []dddcore.Event
	if rf, ok := ret.Get(0).(func() []dddcore.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dddcore.Event)
		}
	}

	return r0
}

type mockConstructorTestingTNewAggregateRoot interface {
	mock.TestingT
	Cleanup(func())
}

// NewAggregateRoot creates a new instance of AggregateRoot. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAggregateRoot(t mockConstructorTestingTNewAggregateRoot) *AggregateRoot {
	mock := &AggregateRoot{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
