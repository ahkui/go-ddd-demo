// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	dddcore "cypt/internal/dddcore"

	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// Execute provides a mock function with given fields: input
func (_m *UseCase) Execute(input *dddcore.Input) (dddcore.Output, error) {
	ret := _m.Called(input)

	var r0 dddcore.Output
	var r1 error
	if rf, ok := ret.Get(0).(func(*dddcore.Input) (dddcore.Output, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(*dddcore.Input) dddcore.Output); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dddcore.Output)
		}
	}

	if rf, ok := ret.Get(1).(func(*dddcore.Input) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventBus provides a mock function with given fields:
func (_m *UseCase) GetEventBus() dddcore.EventBus {
	ret := _m.Called()

	var r0 dddcore.EventBus
	if rf, ok := ret.Get(0).(func() dddcore.EventBus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dddcore.EventBus)
		}
	}

	return r0
}

type mockConstructorTestingTNewUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCase(t mockConstructorTestingTNewUseCase) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
